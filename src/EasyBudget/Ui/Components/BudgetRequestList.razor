@using GridBlazor.Pagination
@using EasyBudget.Common.DataAccess.Dtos
@using GridShared.Utility
@using DocumentFormat.OpenXml.Drawing.Charts
@using DocumentFormat.OpenXml.Office2016.Drawing.Charts
@using EasyBudget.Business.Services
@using GridShared
@using GridShared.Pagination
@using GridShared.Totals
@using Microsoft.Extensions.Primitives
@using System.Data.SqlClient
@using EasyBudget.Common.Model
@using EasyBudget.Common.Model.Security


@if (true)
{
    <div class="list-view-container">
        <div class="list-view-top">
            <div class="list-view-table">
                <table>
                    <tr>
                        <th>
                            <input type="checkbox" @onchange="args => { MainCheckboxClicked(args); }">
                        </th>
                        <th>Назва</th>
                        <th>Ініціатор</th>
                        <th>Клініка</th>
                        <th>Дата запиту</th>
                        <th>Відділ</th>
                        <th>State</th>
                    </tr>
                    @{
                        foreach (BudgetRequestRowViewModel budgetRequest in ViewModel.BudgetRequestPage)
                        {
                            <tr>
                                <td>
                                    <input type="checkbox" @bind="budgetRequest.IsSelected"/>
                                </td>
                                <td>@budgetRequest.BudgetRequest.Name</td>
                                <td>@budgetRequest.BudgetRequest.RequesterName</td>
                                <td>@budgetRequest.BudgetRequest.UnitName</td>
                                <td>@budgetRequest.BudgetRequest.DateRequested.ToString("d")</td>
                                <td>@budgetRequest.BudgetRequest.DepartmentName</td>
                                <td>@budgetRequest.BudgetRequest.State.ToString()</td>
                            </tr>
                        }
                    }
                </table>
            </div>
            <div class="list-view-filter">
                <div>
                    <span>Ініціатор</span>
                    <select @bind="ViewModel.FilterViewModel.Requester">
                        <option value="@Guid.Empty"></option>
                        @{
                            IEnumerable<User> requesters = ViewModel.BudgetRequests
                                .Where(br => ViewModel.FilterViewModel.RequesterIds.Contains(br.BudgetRequest.RequesterId))
                                .Select(br => new User()
                                {
                                    Id = br.BudgetRequest.RequesterId,
                                    Name = br.BudgetRequest.RequesterName
                                })
                                .GroupBy(br => br.Name)
                                .Select(br =>br.First())
                                .ToList();
                            foreach (User user in requesters)
                            {
                                <option value="@user.Id">@user.Name</option>
                            }
                        }

                    </select>
                </div>
                <div>
                    <span>Клініка</span>
                    <select @bind="ViewModel.FilterViewModel.Unit">
                        <option value="@Guid.Empty"></option>
                        @{
                            IEnumerable<Unit> units = ViewModel.BudgetRequests
                                .Where(br => ViewModel.FilterViewModel.UnitIds.Contains(br.BudgetRequest.UnitId))
                                .Select(br => new Unit()
                                {
                                    Id = br.BudgetRequest.UnitId,
                                    Name = br.BudgetRequest.UnitName
                                })
                                .GroupBy(u => u.Name)
                                .Select(u =>u.First())
                                .ToList();
                            @foreach (Unit unit in units)
                            {
                                <option value="@unit.Id">@unit.Name</option>
                            }
                        }

                    </select>
                </div>
                <div>
                    <span>Відділ</span>
                    <select @bind="ViewModel.FilterViewModel.Department">
                        <option value="@Guid.Empty"></option>
                        @{
                            IEnumerable<Department> departments = ViewModel.BudgetRequests
                                .Where(br => ViewModel.FilterViewModel.DepartmentIds.Contains(br.BudgetRequest.DepartmentId))
                                .Select(br => new Department()
                                {
                                    Id = br.BudgetRequest.DepartmentId,
                                    Name = br.BudgetRequest.DepartmentName
                                })
                                .GroupBy(d => d.Name)
                                .Select(d => d.First())
                                .ToList();
                            foreach (Department department in departments)
                            {
                                <option value="@department.Id">@department.Name</option>
                            }
                        }
                    </select>
                </div>
                <div>
                    <span>State</span>
                    <select @bind="ViewModel.FilterViewModel.State">
                        <option>@BudgetState.Undefined.ToString()</option>
                        @{
                            foreach (BudgetState state in ViewModel.FilterViewModel.States)
                            {
                                <option>@state.ToString()</option>
                            }
                        }

                    </select>
                </div>
                <div>
                    <button @onclick="(() => {ViewModel.FilterViewModel.IsActive = !ViewModel.FilterViewModel.IsActive;})">Фільтр</button>
                </div>
            </div>
        </div>
        <div class="list-view-bottom">
            <div class="list-view-combo">
                <span style="color: red">Сторінка</span>
                <div class="common-button-div">
                    @if (ViewModel.PageNumber != 1)
                    {
                        <button @onclick="() => { ViewModel.PageNumber -= 1; }">Попередня</button>
                    }
                    else
                    {
                        <button disabled="disabled">Попередня</button>
                    }
                </div>
                <select @bind="ViewModel.PageNumber">
                    @for (int i = 0; i < ViewModel.Total / ViewModel.PageSize; i++)
                    {
                        <option>@(i + 1)</option>
                    }
                    @if (ViewModel.Total / ViewModel.PageSize != (double)ViewModel.Total / (double)ViewModel.PageSize)
                    {
                        <option>@(ViewModel.Total / ViewModel.PageSize + 1)</option>
                    }
                </select>
                <div class="common-button-div">
                    @if (ViewModel.Total - ViewModel.PageSize * ViewModel.PageNumber > 0)
                    {
                        <button @onclick="() => { ViewModel.PageNumber += 1; }">Наступна</button>
                    }
                    else
                    {
                        <button disabled="disabled">Наступна</button>
                    }

                </div>
            </div>
            <div class="list-view-buttons">
                <div class="common-button-div">
                    <button @onclick="OngoingListButtonClick">Button1</button>
                </div>
                <div class="common-button-div">
                    <button @onclick="ApproveCheckedListButtonCLick">Затвердити</button>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <p><em>Loading...</em></p>
}

@code {
    [Parameter]
    public IBudgetRequestListViewModel ViewModel { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            ViewModel.ViewModelChanged += () => this.InvokeAsync(StateHasChanged);
        }
        
        await base.OnAfterRenderAsync(firstRender);
    }

    private Task _task;
    private void OngoingListButtonClick()
    {

    }
    private void ApproveCheckedListButtonCLick()
    {
        ViewModel.ApproveRequests();
    }

    private void MainCheckboxClicked(ChangeEventArgs args)
    {
        bool value = (bool) args.Value;
        foreach (BudgetRequestRowViewModel row in ViewModel.BudgetRequests)
        {
            row.IsSelected = value;
        }
        this.StateHasChanged();
    }

}
